// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(USER)
  googleId      String?   @unique
  password      String?   // hashed password for email/password auth
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  payments      Payment[]
  downloads     Download[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String
  content     String?  // extracted text content
  filePath    String   // path to the actual file
  fileName    String   // original filename
  fileSize    Int      // file size in bytes
  mimeType    String   // file MIME type
  price       Float    @default(0)
  isFree      Boolean  @default(false)
  category    String
  tags        String[] // array of tags
  isPublished Boolean  @default(false)
  
  // Metadata
  downloadCount Int      @default(0)
  viewCount     Int      @default(0)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relations
  payments  Payment[]
  downloads Download[]
  analysis  DocumentAnalysis?

  @@map("documents")
}

model DocumentAnalysis {
  id         String   @id @default(cuid())
  documentId String   @unique
  keywords   String[] // extracted keywords
  summary    String?  // auto-generated summary
  language   String?  // detected language
  wordCount  Int?     // word count
  readingTime Int?    // estimated reading time in minutes
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@map("document_analysis")
}

model Payment {
  id               String        @id @default(cuid())
  userId           String
  documentId       String?       // null for package purchases
  amount           Float
  currency         String        @default("USD")
  status           PaymentStatus @default(PENDING)
  stripePaymentId  String?       @unique
  stripeSessionId  String?       @unique
  
  // Payment metadata
  paymentMethod    String?
  receiptUrl       String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id])

  @@map("payments")
}

model Download {
  id         String   @id @default(cuid())
  userId     String
  documentId String
  ipAddress  String?
  userAgent  String?
  
  createdAt DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  @@unique([userId, documentId]) // Prevent duplicate downloads tracking
  @@map("downloads")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  image       String?
  category    String
  tags        String[]
  isPublished Boolean  @default(false)
  readTime    Int?     // estimated reading time in minutes
  viewCount   Int      @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  @@map("blog_posts")
}

enum UserRole {
  USER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
